/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserInterest as PrismaUserInterest,
  Interest as PrismaInterest,
  User as PrismaUser,
} from "@prisma/client";

export class UserInterestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserInterestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userInterest.count(args);
  }

  async userInterests(
    args: Prisma.UserInterestFindManyArgs
  ): Promise<PrismaUserInterest[]> {
    return this.prisma.userInterest.findMany(args);
  }
  async userInterest(
    args: Prisma.UserInterestFindUniqueArgs
  ): Promise<PrismaUserInterest | null> {
    return this.prisma.userInterest.findUnique(args);
  }
  async createUserInterest(
    args: Prisma.UserInterestCreateArgs
  ): Promise<PrismaUserInterest> {
    return this.prisma.userInterest.create(args);
  }
  async updateUserInterest(
    args: Prisma.UserInterestUpdateArgs
  ): Promise<PrismaUserInterest> {
    return this.prisma.userInterest.update(args);
  }
  async deleteUserInterest(
    args: Prisma.UserInterestDeleteArgs
  ): Promise<PrismaUserInterest> {
    return this.prisma.userInterest.delete(args);
  }

  async getInterest(parentId: string): Promise<PrismaInterest | null> {
    return this.prisma.userInterest
      .findUnique({
        where: { id: parentId },
      })
      .interest();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userInterest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
