/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserUpdateInput as PrismaUserUpdateInput,
} from "@prisma/client";

export class UserUpdateInputServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserUpdateInputCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userUpdateInput.count(args);
  }

  async userUpdateInputs(
    args: Prisma.UserUpdateInputFindManyArgs
  ): Promise<PrismaUserUpdateInput[]> {
    return this.prisma.userUpdateInput.findMany(args);
  }
  async userUpdateInput(
    args: Prisma.UserUpdateInputFindUniqueArgs
  ): Promise<PrismaUserUpdateInput | null> {
    return this.prisma.userUpdateInput.findUnique(args);
  }
  async createUserUpdateInput(
    args: Prisma.UserUpdateInputCreateArgs
  ): Promise<PrismaUserUpdateInput> {
    return this.prisma.userUpdateInput.create(args);
  }
  async updateUserUpdateInput(
    args: Prisma.UserUpdateInputUpdateArgs
  ): Promise<PrismaUserUpdateInput> {
    return this.prisma.userUpdateInput.update(args);
  }
  async deleteUserUpdateInput(
    args: Prisma.UserUpdateInputDeleteArgs
  ): Promise<PrismaUserUpdateInput> {
    return this.prisma.userUpdateInput.delete(args);
  }
}
